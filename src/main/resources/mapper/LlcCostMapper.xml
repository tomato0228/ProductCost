<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.njust.mapper.LlcCostMapper">
  <resultMap id="BaseResultMap" type="com.njust.model.LlcCost">
    <id column="COST_TREE_ID" jdbcType="DECIMAL" property="costTreeId" />
    <id column="COST_ID" jdbcType="DECIMAL" property="costId" />
    <result column="COST_NAME" jdbcType="VARCHAR" property="costName" />
    <result column="SUPER_COST_ID" jdbcType="DECIMAL" property="superCostId" />
    <result column="ISATOM" jdbcType="DECIMAL" property="isatom" />
    <result column="VARIABLES" jdbcType="VARCHAR" property="variables" />
    <result column="FUNCTION" jdbcType="VARCHAR" property="function" />
    <result column="VALUE" jdbcType="DECIMAL" property="value" />
    <result column="FUNCTION_CAL" jdbcType="VARCHAR" property="functionCal" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    COST_TREE_ID, COST_ID, COST_NAME, SUPER_COST_ID, ISATOM, VARIABLES, FUNCTION, VALUE, 
    FUNCTION_CAL
  </sql>
  <select id="selectByExample" parameterType="com.njust.model.LlcCostExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from llc_cost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.njust.model.LlcCostKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from llc_cost
    where COST_TREE_ID = #{costTreeId,jdbcType=DECIMAL}
      and COST_ID = #{costId,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.njust.model.LlcCostKey">
    delete from llc_cost
    where COST_TREE_ID = #{costTreeId,jdbcType=DECIMAL}
      and COST_ID = #{costId,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.njust.model.LlcCostExample">
    delete from llc_cost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.njust.model.LlcCost">
    insert into llc_cost (COST_TREE_ID, COST_ID, COST_NAME, 
      SUPER_COST_ID, ISATOM, VARIABLES, 
      FUNCTION, VALUE, FUNCTION_CAL
      )
    values (#{costTreeId,jdbcType=DECIMAL}, #{costId,jdbcType=DECIMAL}, #{costName,jdbcType=VARCHAR}, 
      #{superCostId,jdbcType=DECIMAL}, #{isatom,jdbcType=DECIMAL}, #{variables,jdbcType=VARCHAR}, 
      #{function,jdbcType=VARCHAR}, #{value,jdbcType=DECIMAL}, #{functionCal,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.njust.model.LlcCost">
    insert into llc_cost
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="costTreeId != null">
        COST_TREE_ID,
      </if>
      <if test="costId != null">
        COST_ID,
      </if>
      <if test="costName != null">
        COST_NAME,
      </if>
      <if test="superCostId != null">
        SUPER_COST_ID,
      </if>
      <if test="isatom != null">
        ISATOM,
      </if>
      <if test="variables != null">
        VARIABLES,
      </if>
      <if test="function != null">
        FUNCTION,
      </if>
      <if test="value != null">
        VALUE,
      </if>
      <if test="functionCal != null">
        FUNCTION_CAL,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="costTreeId != null">
        #{costTreeId,jdbcType=DECIMAL},
      </if>
      <if test="costId != null">
        #{costId,jdbcType=DECIMAL},
      </if>
      <if test="costName != null">
        #{costName,jdbcType=VARCHAR},
      </if>
      <if test="superCostId != null">
        #{superCostId,jdbcType=DECIMAL},
      </if>
      <if test="isatom != null">
        #{isatom,jdbcType=DECIMAL},
      </if>
      <if test="variables != null">
        #{variables,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        #{function,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        #{value,jdbcType=DECIMAL},
      </if>
      <if test="functionCal != null">
        #{functionCal,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.njust.model.LlcCostExample" resultType="java.lang.Long">
    select count(*) from llc_cost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update llc_cost
    <set>
      <if test="record.costTreeId != null">
        COST_TREE_ID = #{record.costTreeId,jdbcType=DECIMAL},
      </if>
      <if test="record.costId != null">
        COST_ID = #{record.costId,jdbcType=DECIMAL},
      </if>
      <if test="record.costName != null">
        COST_NAME = #{record.costName,jdbcType=VARCHAR},
      </if>
      <if test="record.superCostId != null">
        SUPER_COST_ID = #{record.superCostId,jdbcType=DECIMAL},
      </if>
      <if test="record.isatom != null">
        ISATOM = #{record.isatom,jdbcType=DECIMAL},
      </if>
      <if test="record.variables != null">
        VARIABLES = #{record.variables,jdbcType=VARCHAR},
      </if>
      <if test="record.function != null">
        FUNCTION = #{record.function,jdbcType=VARCHAR},
      </if>
      <if test="record.value != null">
        VALUE = #{record.value,jdbcType=DECIMAL},
      </if>
      <if test="record.functionCal != null">
        FUNCTION_CAL = #{record.functionCal,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update llc_cost
    set COST_TREE_ID = #{record.costTreeId,jdbcType=DECIMAL},
      COST_ID = #{record.costId,jdbcType=DECIMAL},
      COST_NAME = #{record.costName,jdbcType=VARCHAR},
      SUPER_COST_ID = #{record.superCostId,jdbcType=DECIMAL},
      ISATOM = #{record.isatom,jdbcType=DECIMAL},
      VARIABLES = #{record.variables,jdbcType=VARCHAR},
      FUNCTION = #{record.function,jdbcType=VARCHAR},
      VALUE = #{record.value,jdbcType=DECIMAL},
      FUNCTION_CAL = #{record.functionCal,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.njust.model.LlcCost">
    update llc_cost
    <set>
      <if test="costName != null">
        COST_NAME = #{costName,jdbcType=VARCHAR},
      </if>
      <if test="superCostId != null">
        SUPER_COST_ID = #{superCostId,jdbcType=DECIMAL},
      </if>
      <if test="isatom != null">
        ISATOM = #{isatom,jdbcType=DECIMAL},
      </if>
      <if test="variables != null">
        VARIABLES = #{variables,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        FUNCTION = #{function,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        VALUE = #{value,jdbcType=DECIMAL},
      </if>
      <if test="functionCal != null">
        FUNCTION_CAL = #{functionCal,jdbcType=VARCHAR},
      </if>
    </set>
    where COST_TREE_ID = #{costTreeId,jdbcType=DECIMAL}
      and COST_ID = #{costId,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.njust.model.LlcCost">
    update llc_cost
    set COST_NAME = #{costName,jdbcType=VARCHAR},
      SUPER_COST_ID = #{superCostId,jdbcType=DECIMAL},
      ISATOM = #{isatom,jdbcType=DECIMAL},
      VARIABLES = #{variables,jdbcType=VARCHAR},
      FUNCTION = #{function,jdbcType=VARCHAR},
      VALUE = #{value,jdbcType=DECIMAL},
      FUNCTION_CAL = #{functionCal,jdbcType=VARCHAR}
    where COST_TREE_ID = #{costTreeId,jdbcType=DECIMAL}
      and COST_ID = #{costId,jdbcType=DECIMAL}
  </update>
</mapper>